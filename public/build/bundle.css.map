{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../Wheel.svelte",
    "../../App.svelte"
  ],
  "sourcesContent": [
    "<script>\n    import {scaleLinear} from 'd3-scale';\n    import {arc as d3arc} from 'd3-shape';\n    import {getMonthStr} from \"../date.utils\";\n\n    export let month = '';\n    // format : Array<['20191231', Array<Course>]>\n    export let data = [];\n    export let width = 150;\n    export let maxDistance = 40;\n\n    const margin = {top: 20, right: 20, bottom: 20, left: 25};\n    const donutOffset = width/8;\n    const levels =[0, 10, 20, 30, 40, 50]\n                .filter(d => d <= maxDistance);\n\n    const [displayMonth, displayYear] = getMonthStr(month);\n\n\n\n    // Note: 31 days for each month (easier)\n    const dayAngle = 2 * Math.PI / 31;\n    $: radiusScale = scaleLinear()\n            .domain([0, maxDistance])\n            .range([donutOffset, width / 2 - margin.left]);\n\n    $: slices = data.map( d => {\n        const [day, courses] = d;\n        const dayOfMonth = +day.substring(8)-1;\n        const distance = courses.reduce( (acc, elt) => acc + elt.distance, 0);\n        const shape = d3arc()\n                .startAngle(dayAngle * dayOfMonth)\n                .endAngle(dayAngle * (dayOfMonth + 1))\n                .innerRadius(donutOffset)\n                .outerRadius(radiusScale(distance))();\n\n        return {shape};\n    });\n\n    const weeks = ['1-5', '6-10', '11-15', '16-20', '21-25', '26-30'];\n\n\n    const weekAngle = 5 * dayAngle;\n    $: weekSlices = weeks.map((d, i) => {\n        const shape = d3arc().startAngle(i * weekAngle)\n                .endAngle((i + 1) * weekAngle)\n                .innerRadius(donutOffset -1)\n                .outerRadius(radiusScale(maxDistance))();\n\n        return {shape, name: d};\n\n    });\n\n</script>\n\n<div class=\"container\">\n    <svg width={width} height={width}>\n        <g transform=\"translate({width/2}, {width/2})\">\n            <g class=\"data\">\n                {#each slices as {shape}}\n                    <path d=\"{shape}\"></path>\n                {/each}\n            </g>\n            <g class=\"title\">\n                <text x=\"0\" y=\"0\" dy=\"-5\">{displayMonth}</text>\n                <text x=\"0\" y=\"20\" dy=\"-5\">{displayYear}</text>\n            </g>\n            <g class=\"weeks\">\n                {#each weekSlices as {shape, name}, i}\n                    <path id=\"week{i}\" d=\"{shape}\"></path>\n                    <text dy=\"-4\">\n                        <textPath href=\"#week{i}\" startOffset=\"12%\" >\n                            {name}\n                        </textPath>\n                    </text>\n                {/each}\n            </g>\n            <g class=\"levels\">\n                {#each levels as level}\n                    <circle cx=\"0\" cy=\"0\" r=\"{radiusScale(level)}\"></circle>\n                    <text x=\"0\" y={-radiusScale(level)}>{level}</text>\n                {/each}\n                <text x=\"0\" y=\"{-width/2 +20}\">km</text>\n            </g>\n        </g>\n    </svg>\n</div>\n\n<style>\n    .container {\n        width: min-content;\n        width: -moz-min-content;\n        width: -webkit-min-content;\n    }\n    text {\n        font-family: 'Nunito', sans-serif;\n    }\n    .data path {\n        stroke: #8fb8bf;\n        fill: #a3d2da;\n    }\n\n    .title text {\n        fill: #333333;\n        stroke: #333333;\n        font-size: 1.6rem;\n        text-anchor: middle;\n    }\n\n    .weeks path {\n        fill: none;\n        stroke: lightgray;\n        stroke-width: 1px;\n        stroke-dasharray: 5 2;\n    }\n    .levels circle {\n        fill: none;\n        stroke: rgba(128, 184, 92, 0.52);\n        stroke-width: 1px;\n        stroke-dasharray: 5;\n    }\n    .levels text {\n        fill: #999999;\n        stroke: #999999;\n        font-size: .8rem;\n    }\n</style>",
    "<script>\n\timport Wheel from './viz/Wheel.svelte';\n\timport {getData} from './velib.service.js';\n\n\texport let source = '';\n\tconst promise = getData(source);\n</script>\n\n<main>\n\t<h1>Stats VÃ©lib</h1>\n\t<div class=\"container\">\n\t{#await promise}\n\t...loading...\n\t{:then data}\n\t\t{#each data as [month, courses], i}\n\t\t\t<Wheel {month}\n\t\t\t\t   data={courses}\n\t\t\t\t   maxDistance=\"38\"\n\t\t\t\t   width=\"350\"\n\t\t\t></Wheel>\n\t\t{/each}\n\t{/await}\n\t</div>\n\n</main>\n\n<style>\n\t.container {\n\t\tdisplay: flex;\n\t\tflex-direction: row;\n\t}\n\n</style>"
  ],
  "names": [],
  "mappings": "AAyFI,UAAU,8BAAC,CAAC,AACR,KAAK,CAAE,WAAW,CAClB,KAAK,CAAE,gBAAgB,CACvB,KAAK,CAAE,mBAAmB,AAC9B,CAAC,AACD,IAAI,8BAAC,CAAC,AACF,WAAW,CAAE,QAAQ,CAAC,CAAC,UAAU,AACrC,CAAC,AACD,oBAAK,CAAC,IAAI,eAAC,CAAC,AACR,MAAM,CAAE,OAAO,CACf,IAAI,CAAE,OAAO,AACjB,CAAC,AAED,qBAAM,CAAC,IAAI,eAAC,CAAC,AACT,IAAI,CAAE,OAAO,CACb,MAAM,CAAE,OAAO,CACf,SAAS,CAAE,MAAM,CACjB,WAAW,CAAE,MAAM,AACvB,CAAC,AAED,qBAAM,CAAC,IAAI,eAAC,CAAC,AACT,IAAI,CAAE,IAAI,CACV,MAAM,CAAE,SAAS,CACjB,YAAY,CAAE,GAAG,CACjB,gBAAgB,CAAE,CAAC,CAAC,CAAC,AACzB,CAAC,AACD,sBAAO,CAAC,MAAM,eAAC,CAAC,AACZ,IAAI,CAAE,IAAI,CACV,MAAM,CAAE,KAAK,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,CAChC,YAAY,CAAE,GAAG,CACjB,gBAAgB,CAAE,CAAC,AACvB,CAAC,AACD,sBAAO,CAAC,IAAI,eAAC,CAAC,AACV,IAAI,CAAE,OAAO,CACb,MAAM,CAAE,OAAO,CACf,SAAS,CAAE,KAAK,AACpB,CAAC;AClGJ,UAAU,eAAC,CAAC,AACX,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,GAAG,AACpB,CAAC"
}