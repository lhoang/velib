{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../App.svelte",
    "../../Wheel.svelte",
    "../../Distance.svelte"
  ],
  "sourcesContent": [
    "<script>\n    import Wheel from './viz/Wheel.svelte';\n    import Distance from './viz/Distance.svelte';\n    import {getData} from './velib.service.js';\n    import {buildDistancePoints, getCoursesByMonthAndDay} from \"./velib.service\";\n\n    export let source = '';\n    let allCourses = [];\n    let coursesByMonthPromise;\n    let distancePoints;\n\n    $:(async () => allCourses = await getData(source))();\n    $: coursesByMonthPromise = getCoursesByMonthAndDay(allCourses);\n\n\n    $: distancePoints = buildDistancePoints(allCourses, 965.1);\n</script>\n\n<main>\n    <h1>Stats Vélib</h1>\n    <div class=\"container\">\n\t\t<div class=\"wheels\">\n        {#await coursesByMonthPromise}\n            ...loading...\n        {:then  coursesByMonth}\n            {#each coursesByMonth as [month, courses], i}\n                <Wheel {month}\n                       data={courses}\n                       maxDistance=\"38\"\n                       width=\"350\"\n                ></Wheel>\n            {/each}\n        {/await}\n\t\t</div>\n\n\t\t<div class=\"distance\">\n        {#await distancePoints}\n\t\t\t...loading...\n        {:then points}\n\t\t\t<Distance {points} height=\"300\" width=\"700\">\n\t\t\t</Distance>\n        {/await}\n\t\t</div>\n\n    </div>\n\n</main>\n\n<style>\n\t* {\n\t\t--velib-blue: #a3d2da;\n\t\t--velib-blue-dark: #8fb8bf;\n\t\t--velib-green: #80b85c;\n\t\t--velib-green-dark: #6a9c4e;\n\t}\n\n\th1, h2, h3, text {\n\t\tfont-family: 'Nunito', sans-serif;\n\t}\n\n\t.container {\n\t\tdisplay: flex;\n\t\tflex-direction: column;\n\t}\n    .wheels {\n        display: flex;\n        flex-direction: row;\n    }\n\n</style>",
    "<script>\n    import {scaleLinear} from 'd3-scale';\n    import {arc as d3arc} from 'd3-shape';\n    import {getMonthStr} from \"../date.utils\";\n\n    export let month = '';\n    // format : Array<['20191231', Array<Course>]>\n    export let data = [];\n    export let width = 150;\n    export let maxDistance = 40;\n\n    const margin = {top: 20, right: 20, bottom: 20, left: 25};\n    const donutOffset = width/8;\n    const levels =[0, 10, 20, 30, 40, 50]\n                .filter(d => d <= maxDistance);\n\n    const [displayMonth, displayYear] = getMonthStr(month);\n\n\n\n    // Note: 31 days for each month (easier)\n    const dayAngle = 2 * Math.PI / 31;\n    $: radiusScale = scaleLinear()\n            .domain([0, maxDistance])\n            .range([donutOffset, width / 2 - margin.left]);\n\n    $: slices = data.map( d => {\n        const [day, courses] = d;\n        const dayOfMonth = +day.substring(8)-1;\n        const distance = courses.reduce( (acc, elt) => acc + elt.distance, 0);\n        const shape = d3arc()\n                .startAngle(dayAngle * dayOfMonth)\n                .endAngle(dayAngle * (dayOfMonth + 1))\n                .innerRadius(donutOffset)\n                .outerRadius(radiusScale(distance))();\n\n        return {shape};\n    });\n\n    const weeks = ['1-5', '6-10', '11-15', '16-20', '21-25', '26-30'];\n\n\n    const weekAngle = 5 * dayAngle;\n    $: weekSlices = weeks.map((d, i) => {\n        const shape = d3arc().startAngle(i * weekAngle)\n                .endAngle((i + 1) * weekAngle)\n                .innerRadius(donutOffset -1)\n                .outerRadius(radiusScale(maxDistance))();\n\n        return {shape, name: d};\n\n    });\n\n</script>\n\n<div class=\"container\">\n    <svg width={width} height={width}>\n        <g transform=\"translate({width/2}, {width/2})\">\n            <g class=\"data\">\n                {#each slices as {shape}}\n                    <path d=\"{shape}\"></path>\n                {/each}\n            </g>\n            <g class=\"title\">\n                <text x=\"0\" y=\"0\" dy=\"-5\">{displayMonth}</text>\n                <text x=\"0\" y=\"20\" dy=\"-5\">{displayYear}</text>\n            </g>\n            <g class=\"weeks\">\n                {#each weekSlices as {shape, name}, i}\n                    <path id=\"week{i}\" d=\"{shape}\"></path>\n                    <text dy=\"-4\">\n                        <textPath href=\"#week{i}\" startOffset=\"12%\" >\n                            {name}\n                        </textPath>\n                    </text>\n                {/each}\n            </g>\n            <g class=\"levels\">\n                {#each levels as level}\n                    <circle cx=\"0\" cy=\"0\" r=\"{radiusScale(level)}\"></circle>\n                    <text x=\"0\" y={-radiusScale(level)}>{level}</text>\n                {/each}\n                <text x=\"0\" y=\"{-width/2 +20}\">km</text>\n            </g>\n        </g>\n    </svg>\n</div>\n\n<style>\n    .container {\n        width: min-content;\n        width: -moz-min-content;\n    }\n    text {\n        font-family: 'Nunito', sans-serif;\n    }\n    .data path {\n        stroke: var(--velib-blue-dark);\n        fill: var(--velib-blue);\n    }\n\n    .title text {\n        fill: #333333;\n        stroke: #333333;\n        font-size: 1.6rem;\n        text-anchor: middle;\n    }\n\n    .weeks path {\n        fill: none;\n        stroke: lightgray;\n        stroke-width: 1px;\n        stroke-dasharray: 5,2;\n    }\n    .levels circle {\n        fill: none;\n        stroke: var(--velib-green);\n        stroke-opacity: .52;\n        stroke-width: 1px;\n        stroke-dasharray: 5;\n    }\n    .levels text {\n        fill: #999999;\n        stroke: #999999;\n        font-size: .8rem;\n    }\n</style>",
    "<script>\n    import {scaleTime, scaleLinear} from 'd3-scale';\n    import {axisBottom, axisRight} from 'd3-axis';\n    import {timeFormat, timeParse} from 'd3-time-format';\n    import {select as d3select} from 'd3-selection';\n    import {line as d3line, curveStepAfter} from 'd3-shape';\n    import {findMinMax} from \"../velib.service\";\n    import {onMount} from 'svelte';\n\n    export let since = '';\n    export let points = [];\n    export let width = 600;\n    export let height = 250;\n    export let events = [{\n        date: new Date(2019, 11, 5),\n        label: 'Début de la grève',\n    },\n    ];\n\n    const margin = {top: 20, right: 50, bottom: 20, left: 25};\n    let dateMin, dateMax, distanceMin, distanceMax;\n    // Parsing des timestamps\n    const parseTs = timeParse('%Q');\n\n    $: {\n        const minMax = findMinMax(points);\n        dateMin = minMax.dateMin;\n        dateMax = minMax.dateMax;\n        distanceMin = minMax.distanceMin;\n        distanceMax = minMax.distanceMax;\n    }\n\n\n    // Echelles et Axes\n    $: xScale = scaleTime()\n            .domain([dateMin, dateMax])\n            .range([margin.left, width - margin.right]);\n\n    $: yScale = scaleLinear()\n            .domain([distanceMin, distanceMax])\n            .range([height - margin.bottom, margin.top]);\n\n    // Abscisse\n    $: xAxis = axisBottom().scale(xScale)\n            .ticks(6)\n            .tickFormat(timeFormat('%d/%m'));\n\n    $: yAxis = axisRight().scale(yScale)\n            .tickSize(width - margin.left - margin.right)\n            .tickFormat( function (d){\n                return this.parentNode.nextSibling ? d : `${d} km`;\n            });\n\n\n    $: path = d3line()\n            .curve(curveStepAfter)\n        .x(d => xScale(parseTs(d.start)))\n        .y(d => yScale(d.totalDistance))\n        (points);\n\n    $: eventLines = events.map( event => {\n        const x = xScale(event.date);\n        return {\n            label: event.label,\n            x1: x,\n            x2: x,\n            y1: margin.top,\n            y2: height - margin.bottom,\n        };\n    });\n\n\n    onMount(() => {\n        setTimeout(() => {\n            // Génération des axes\n            d3select('g[ref=\"xAxis\"]').call(xAxis)\n                    .call(g => g.select(\".domain\")\n                            .remove());\n            d3select('g[ref=\"yAxis\"]').call(yAxis)\n                    .call(g => g.select(\".domain\")\n                            .remove())\n                    .call(g => g.selectAll(\".tick line\")\n                            .attr(\"stroke-opacity\", 0.5)\n                            .attr(\"stroke-dasharray\", \"2,2\"))\n                    .call(g => g.selectAll(\".tick text\")\n                            .attr(\"x\", 4)\n                            .attr(\"dy\", -4));\n        }, 50);\n    });\n\n</script>\n\n<div class=\"container\">\n    <h3>Distance totale</h3>\n    <svg width={width} height={height}>\n        <g class=\"data\">\n            <path d=\"{path}\"></path>\n        </g>\n        <g class=\"events\">\n            {#each eventLines as {x1, x2, y1, y2, label}}\n                <line {x1} {x2} {y1} {y2}></line>\n                <text x={x1} y={margin.top}\n                      dx=\"5\">\n                    {label}\n                </text>\n            {/each}\n\n        </g>\n\n\n        <g>\n            <g ref=\"xAxis\" transform={`translate(0, ${height - margin.bottom})`}></g>\n            <g ref=\"yAxis\" transform={`translate(${margin.left}, 0)`}></g>\n        </g>\n    </svg>\n\n</div>\n\n\n\n\n\n<style>\n    h3, text {\n        font-family: 'Nunito', sans-serif;\n    }\n\n    .container {\n        width: min-content;\n        width: -moz-min-content;\n    }\n\n    g.data path {\n        stroke: var(--velib-green-dark);\n        stroke-width: 2px;\n        fill: none;\n    }\n\n    g.events line {\n        stroke: darkred;\n        stroke-width: 2px;\n    }\n    g.events text {\n        stroke: #666666;\n        fill: #666666;\n        font-size: .7rem;\n    }\n</style>"
  ],
  "names": [],
  "mappings": "AAiDC,cAAE,CAAC,AACF,YAAY,CAAE,OAAO,CACrB,iBAAiB,CAAE,OAAO,CAC1B,aAAa,CAAE,OAAO,CACtB,kBAAkB,CAAE,OAAO,AAC5B,CAAC,AAED,EAAE,cAAe,CAAC,AACjB,WAAW,CAAE,QAAQ,CAAC,CAAC,UAAU,AAClC,CAAC,AAED,UAAU,cAAC,CAAC,AACX,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,MAAM,AACvB,CAAC,AACE,OAAO,cAAC,CAAC,AACL,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,GAAG,AACvB,CAAC;ACsBD,UAAU,8BAAC,CAAC,AACR,KAAK,CAAE,WAAW,CAClB,KAAK,CAAE,gBAAgB,AAC3B,CAAC,AACD,IAAI,8BAAC,CAAC,AACF,WAAW,CAAE,QAAQ,CAAC,CAAC,UAAU,AACrC,CAAC,AACD,oBAAK,CAAC,IAAI,eAAC,CAAC,AACR,MAAM,CAAE,IAAI,iBAAiB,CAAC,CAC9B,IAAI,CAAE,IAAI,YAAY,CAAC,AAC3B,CAAC,AAED,qBAAM,CAAC,IAAI,eAAC,CAAC,AACT,IAAI,CAAE,OAAO,CACb,MAAM,CAAE,OAAO,CACf,SAAS,CAAE,MAAM,CACjB,WAAW,CAAE,MAAM,AACvB,CAAC,AAED,qBAAM,CAAC,IAAI,eAAC,CAAC,AACT,IAAI,CAAE,IAAI,CACV,MAAM,CAAE,SAAS,CACjB,YAAY,CAAE,GAAG,CACjB,gBAAgB,CAAE,CAAC,CAAC,CAAC,AACzB,CAAC,AACD,sBAAO,CAAC,MAAM,eAAC,CAAC,AACZ,IAAI,CAAE,IAAI,CACV,MAAM,CAAE,IAAI,aAAa,CAAC,CAC1B,cAAc,CAAE,GAAG,CACnB,YAAY,CAAE,GAAG,CACjB,gBAAgB,CAAE,CAAC,AACvB,CAAC,AACD,sBAAO,CAAC,IAAI,eAAC,CAAC,AACV,IAAI,CAAE,OAAO,CACb,MAAM,CAAE,OAAO,CACf,SAAS,CAAE,KAAK,AACpB,CAAC;ACFD,8BAAE,CAAE,IAAI,4BAAC,CAAC,AACN,WAAW,CAAE,QAAQ,CAAC,CAAC,UAAU,AACrC,CAAC,AAED,UAAU,4BAAC,CAAC,AACR,KAAK,CAAE,WAAW,CAClB,KAAK,CAAE,gBAAgB,AAC3B,CAAC,AAED,CAAC,mBAAK,CAAC,IAAI,cAAC,CAAC,AACT,MAAM,CAAE,IAAI,kBAAkB,CAAC,CAC/B,YAAY,CAAE,GAAG,CACjB,IAAI,CAAE,IAAI,AACd,CAAC,AAED,CAAC,qBAAO,CAAC,IAAI,cAAC,CAAC,AACX,MAAM,CAAE,OAAO,CACf,YAAY,CAAE,GAAG,AACrB,CAAC,AACD,CAAC,qBAAO,CAAC,IAAI,cAAC,CAAC,AACX,MAAM,CAAE,OAAO,CACf,IAAI,CAAE,OAAO,CACb,SAAS,CAAE,KAAK,AACpB,CAAC"
}